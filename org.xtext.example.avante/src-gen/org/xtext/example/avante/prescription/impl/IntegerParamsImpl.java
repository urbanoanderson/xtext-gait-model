/**
 * generated by Xtext 2.16.0
 */
package org.xtext.example.avante.prescription.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.avante.prescription.IntegerParams;
import org.xtext.example.avante.prescription.PrescriptionPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Integer Params</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.avante.prescription.impl.IntegerParamsImpl#getMeasureUnit <em>Measure Unit</em>}</li>
 *   <li>{@link org.xtext.example.avante.prescription.impl.IntegerParamsImpl#getMinValue <em>Min Value</em>}</li>
 *   <li>{@link org.xtext.example.avante.prescription.impl.IntegerParamsImpl#getMaxValue <em>Max Value</em>}</li>
 * </ul>
 *
 * @generated
 */
public class IntegerParamsImpl extends MinimalEObjectImpl.Container implements IntegerParams
{
  /**
   * The default value of the '{@link #getMeasureUnit() <em>Measure Unit</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMeasureUnit()
   * @generated
   * @ordered
   */
  protected static final String MEASURE_UNIT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getMeasureUnit() <em>Measure Unit</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMeasureUnit()
   * @generated
   * @ordered
   */
  protected String measureUnit = MEASURE_UNIT_EDEFAULT;

  /**
   * The default value of the '{@link #getMinValue() <em>Min Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMinValue()
   * @generated
   * @ordered
   */
  protected static final int MIN_VALUE_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getMinValue() <em>Min Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMinValue()
   * @generated
   * @ordered
   */
  protected int minValue = MIN_VALUE_EDEFAULT;

  /**
   * The default value of the '{@link #getMaxValue() <em>Max Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMaxValue()
   * @generated
   * @ordered
   */
  protected static final int MAX_VALUE_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getMaxValue() <em>Max Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMaxValue()
   * @generated
   * @ordered
   */
  protected int maxValue = MAX_VALUE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IntegerParamsImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return PrescriptionPackage.Literals.INTEGER_PARAMS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getMeasureUnit()
  {
    return measureUnit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMeasureUnit(String newMeasureUnit)
  {
    String oldMeasureUnit = measureUnit;
    measureUnit = newMeasureUnit;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PrescriptionPackage.INTEGER_PARAMS__MEASURE_UNIT, oldMeasureUnit, measureUnit));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getMinValue()
  {
    return minValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMinValue(int newMinValue)
  {
    int oldMinValue = minValue;
    minValue = newMinValue;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PrescriptionPackage.INTEGER_PARAMS__MIN_VALUE, oldMinValue, minValue));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getMaxValue()
  {
    return maxValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMaxValue(int newMaxValue)
  {
    int oldMaxValue = maxValue;
    maxValue = newMaxValue;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PrescriptionPackage.INTEGER_PARAMS__MAX_VALUE, oldMaxValue, maxValue));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case PrescriptionPackage.INTEGER_PARAMS__MEASURE_UNIT:
        return getMeasureUnit();
      case PrescriptionPackage.INTEGER_PARAMS__MIN_VALUE:
        return getMinValue();
      case PrescriptionPackage.INTEGER_PARAMS__MAX_VALUE:
        return getMaxValue();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case PrescriptionPackage.INTEGER_PARAMS__MEASURE_UNIT:
        setMeasureUnit((String)newValue);
        return;
      case PrescriptionPackage.INTEGER_PARAMS__MIN_VALUE:
        setMinValue((Integer)newValue);
        return;
      case PrescriptionPackage.INTEGER_PARAMS__MAX_VALUE:
        setMaxValue((Integer)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case PrescriptionPackage.INTEGER_PARAMS__MEASURE_UNIT:
        setMeasureUnit(MEASURE_UNIT_EDEFAULT);
        return;
      case PrescriptionPackage.INTEGER_PARAMS__MIN_VALUE:
        setMinValue(MIN_VALUE_EDEFAULT);
        return;
      case PrescriptionPackage.INTEGER_PARAMS__MAX_VALUE:
        setMaxValue(MAX_VALUE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case PrescriptionPackage.INTEGER_PARAMS__MEASURE_UNIT:
        return MEASURE_UNIT_EDEFAULT == null ? measureUnit != null : !MEASURE_UNIT_EDEFAULT.equals(measureUnit);
      case PrescriptionPackage.INTEGER_PARAMS__MIN_VALUE:
        return minValue != MIN_VALUE_EDEFAULT;
      case PrescriptionPackage.INTEGER_PARAMS__MAX_VALUE:
        return maxValue != MAX_VALUE_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (measureUnit: ");
    result.append(measureUnit);
    result.append(", minValue: ");
    result.append(minValue);
    result.append(", maxValue: ");
    result.append(maxValue);
    result.append(')');
    return result.toString();
  }

} //IntegerParamsImpl
