/*
 * generated by Xtext 2.16.0
 */
package org.xtext.example.avante.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class PrescriptionGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DomainModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.avante.Prescription.DomainModel");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsPrescriptionParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//DomainModel:
		//	elements+=Prescription*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=Prescription*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//Prescription
		public RuleCall getElementsPrescriptionParserRuleCall_0() { return cElementsPrescriptionParserRuleCall_0; }
	}
	public class PrescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.avante.Prescription.Prescription");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrescriptionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFeaturesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFeaturesAttributeParserRuleCall_3_0 = (RuleCall)cFeaturesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Prescription:
		//	'prescription' name=ID '{'
		//	features+=Attribute*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'prescription' name=ID '{' features+=Attribute* '}'
		public Group getGroup() { return cGroup; }
		
		//'prescription'
		public Keyword getPrescriptionKeyword_0() { return cPrescriptionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//features+=Attribute*
		public Assignment getFeaturesAssignment_3() { return cFeaturesAssignment_3; }
		
		//Attribute
		public RuleCall getFeaturesAttributeParserRuleCall_3_0() { return cFeaturesAttributeParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.avante.Prescription.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cManyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cManyManyKeyword_0_0 = (Keyword)cManyAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttrParamsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttrParamsAttributeParamsParserRuleCall_3_0 = (RuleCall)cAttrParamsAssignment_3.eContents().get(0);
		
		//Attribute:
		//	many?='many'? name=ID ':' attrParams=AttributeParams;
		@Override public ParserRule getRule() { return rule; }
		
		//many?='many'? name=ID ':' attrParams=AttributeParams
		public Group getGroup() { return cGroup; }
		
		//many?='many'?
		public Assignment getManyAssignment_0() { return cManyAssignment_0; }
		
		//'many'
		public Keyword getManyManyKeyword_0_0() { return cManyManyKeyword_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//attrParams=AttributeParams
		public Assignment getAttrParamsAssignment_3() { return cAttrParamsAssignment_3; }
		
		//AttributeParams
		public RuleCall getAttrParamsAttributeParamsParserRuleCall_3_0() { return cAttrParamsAttributeParamsParserRuleCall_3_0; }
	}
	public class AttributeParamsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.avante.Prescription.AttributeParams");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cIntParamsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cIntParamsIntegerParamsParserRuleCall_0_0 = (RuleCall)cIntParamsAssignment_0.eContents().get(0);
		private final Assignment cStrParamsAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cStrParamsStringParamsParserRuleCall_1_0 = (RuleCall)cStrParamsAssignment_1.eContents().get(0);
		
		//AttributeParams:
		//	intParams=IntegerParams | strParams=StringParams;
		@Override public ParserRule getRule() { return rule; }
		
		//intParams=IntegerParams | strParams=StringParams
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//intParams=IntegerParams
		public Assignment getIntParamsAssignment_0() { return cIntParamsAssignment_0; }
		
		//IntegerParams
		public RuleCall getIntParamsIntegerParamsParserRuleCall_0_0() { return cIntParamsIntegerParamsParserRuleCall_0_0; }
		
		//strParams=StringParams
		public Assignment getStrParamsAssignment_1() { return cStrParamsAssignment_1; }
		
		//StringParams
		public RuleCall getStrParamsStringParamsParserRuleCall_1_0() { return cStrParamsStringParamsParserRuleCall_1_0; }
	}
	public class IntegerParamsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.avante.Prescription.IntegerParams");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIntegerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMeasureUnitAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMeasureUnitIDTerminalRuleCall_2_0 = (RuleCall)cMeasureUnitAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMinValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMinValueINTTerminalRuleCall_5_0 = (RuleCall)cMinValueAssignment_5.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cMaxValueAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cMaxValueINTTerminalRuleCall_7_0 = (RuleCall)cMaxValueAssignment_7.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//IntegerParams:
		//	'Integer' ',' measureUnit=ID ',' '[' minValue=INT '-' maxValue=INT ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'Integer' ',' measureUnit=ID ',' '[' minValue=INT '-' maxValue=INT ']'
		public Group getGroup() { return cGroup; }
		
		//'Integer'
		public Keyword getIntegerKeyword_0() { return cIntegerKeyword_0; }
		
		//','
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
		
		//measureUnit=ID
		public Assignment getMeasureUnitAssignment_2() { return cMeasureUnitAssignment_2; }
		
		//ID
		public RuleCall getMeasureUnitIDTerminalRuleCall_2_0() { return cMeasureUnitIDTerminalRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4() { return cLeftSquareBracketKeyword_4; }
		
		//minValue=INT
		public Assignment getMinValueAssignment_5() { return cMinValueAssignment_5; }
		
		//INT
		public RuleCall getMinValueINTTerminalRuleCall_5_0() { return cMinValueINTTerminalRuleCall_5_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_6() { return cHyphenMinusKeyword_6; }
		
		//maxValue=INT
		public Assignment getMaxValueAssignment_7() { return cMaxValueAssignment_7; }
		
		//INT
		public RuleCall getMaxValueINTTerminalRuleCall_7_0() { return cMaxValueINTTerminalRuleCall_7_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_8() { return cRightSquareBracketKeyword_8; }
	}
	public class StringParamsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.avante.Prescription.StringParams");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStringKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDefValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDefValueIDTerminalRuleCall_3_0 = (RuleCall)cDefValueAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cDefValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cDefValueIDTerminalRuleCall_4_1_0 = (RuleCall)cDefValueAssignment_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//StringParams:
		//	'String' ',' '[' defValue+=ID (',' defValue+=ID)* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'String' ',' '[' defValue+=ID (',' defValue+=ID)* ']'
		public Group getGroup() { return cGroup; }
		
		//'String'
		public Keyword getStringKeyword_0() { return cStringKeyword_0; }
		
		//','
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//defValue+=ID
		public Assignment getDefValueAssignment_3() { return cDefValueAssignment_3; }
		
		//ID
		public RuleCall getDefValueIDTerminalRuleCall_3_0() { return cDefValueIDTerminalRuleCall_3_0; }
		
		//(',' defValue+=ID)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//defValue+=ID
		public Assignment getDefValueAssignment_4_1() { return cDefValueAssignment_4_1; }
		
		//ID
		public RuleCall getDefValueIDTerminalRuleCall_4_1_0() { return cDefValueIDTerminalRuleCall_4_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}
	
	
	private final DomainModelElements pDomainModel;
	private final PrescriptionElements pPrescription;
	private final AttributeElements pAttribute;
	private final AttributeParamsElements pAttributeParams;
	private final IntegerParamsElements pIntegerParams;
	private final StringParamsElements pStringParams;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public PrescriptionGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDomainModel = new DomainModelElements();
		this.pPrescription = new PrescriptionElements();
		this.pAttribute = new AttributeElements();
		this.pAttributeParams = new AttributeParamsElements();
		this.pIntegerParams = new IntegerParamsElements();
		this.pStringParams = new StringParamsElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.avante.Prescription".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//DomainModel:
	//	elements+=Prescription*;
	public DomainModelElements getDomainModelAccess() {
		return pDomainModel;
	}
	
	public ParserRule getDomainModelRule() {
		return getDomainModelAccess().getRule();
	}
	
	//Prescription:
	//	'prescription' name=ID '{'
	//	features+=Attribute*
	//	'}';
	public PrescriptionElements getPrescriptionAccess() {
		return pPrescription;
	}
	
	public ParserRule getPrescriptionRule() {
		return getPrescriptionAccess().getRule();
	}
	
	//Attribute:
	//	many?='many'? name=ID ':' attrParams=AttributeParams;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//AttributeParams:
	//	intParams=IntegerParams | strParams=StringParams;
	public AttributeParamsElements getAttributeParamsAccess() {
		return pAttributeParams;
	}
	
	public ParserRule getAttributeParamsRule() {
		return getAttributeParamsAccess().getRule();
	}
	
	//IntegerParams:
	//	'Integer' ',' measureUnit=ID ',' '[' minValue=INT '-' maxValue=INT ']';
	public IntegerParamsElements getIntegerParamsAccess() {
		return pIntegerParams;
	}
	
	public ParserRule getIntegerParamsRule() {
		return getIntegerParamsAccess().getRule();
	}
	
	//StringParams:
	//	'String' ',' '[' defValue+=ID (',' defValue+=ID)* ']';
	public StringParamsElements getStringParamsAccess() {
		return pStringParams;
	}
	
	public ParserRule getStringParamsRule() {
		return getStringParamsAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
