/*
 * generated by Xtext 2.16.0
 */
grammar InternalPrescription;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.avante.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.avante.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.avante.services.PrescriptionGrammarAccess;

}

@parser::members {

 	private PrescriptionGrammarAccess grammarAccess;

    public InternalPrescriptionParser(TokenStream input, PrescriptionGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "DomainModel";
   	}

   	@Override
   	protected PrescriptionGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleDomainModel
entryRuleDomainModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDomainModelRule()); }
	iv_ruleDomainModel=ruleDomainModel
	{ $current=$iv_ruleDomainModel.current; }
	EOF;

// Rule DomainModel
ruleDomainModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getDomainModelAccess().getElementsPrescriptionParserRuleCall_0());
			}
			lv_elements_0_0=rulePrescription
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getDomainModelRule());
				}
				add(
					$current,
					"elements",
					lv_elements_0_0,
					"org.xtext.example.avante.Prescription.Prescription");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRulePrescription
entryRulePrescription returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrescriptionRule()); }
	iv_rulePrescription=rulePrescription
	{ $current=$iv_rulePrescription.current; }
	EOF;

// Rule Prescription
rulePrescription returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='prescription'
		{
			newLeafNode(otherlv_0, grammarAccess.getPrescriptionAccess().getPrescriptionKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getPrescriptionAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPrescriptionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getPrescriptionAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPrescriptionAccess().getFeaturesAttributeParserRuleCall_3_0());
				}
				lv_features_3_0=ruleAttribute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrescriptionRule());
					}
					add(
						$current,
						"features",
						lv_features_3_0,
						"org.xtext.example.avante.Prescription.Attribute");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getPrescriptionAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttributeRule()); }
	iv_ruleAttribute=ruleAttribute
	{ $current=$iv_ruleAttribute.current; }
	EOF;

// Rule Attribute
ruleAttribute returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_many_0_0='many'
				{
					newLeafNode(lv_many_0_0, grammarAccess.getAttributeAccess().getManyManyKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAttributeRule());
					}
					setWithLastConsumed($current, "many", true, "many");
				}
			)
		)?
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAttributeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getAttributeAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAttributeAccess().getAttrParamsAttributeParamsParserRuleCall_3_0());
				}
				lv_attrParams_3_0=ruleAttributeParams
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAttributeRule());
					}
					set(
						$current,
						"attrParams",
						lv_attrParams_3_0,
						"org.xtext.example.avante.Prescription.AttributeParams");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAttributeParams
entryRuleAttributeParams returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttributeParamsRule()); }
	iv_ruleAttributeParams=ruleAttributeParams
	{ $current=$iv_ruleAttributeParams.current; }
	EOF;

// Rule AttributeParams
ruleAttributeParams returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAttributeParamsAccess().getIntParamsIntegerParamsParserRuleCall_0_0());
				}
				lv_intParams_0_0=ruleIntegerParams
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAttributeParamsRule());
					}
					set(
						$current,
						"intParams",
						lv_intParams_0_0,
						"org.xtext.example.avante.Prescription.IntegerParams");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getAttributeParamsAccess().getStrParamsStringParamsParserRuleCall_1_0());
				}
				lv_strParams_1_0=ruleStringParams
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAttributeParamsRule());
					}
					set(
						$current,
						"strParams",
						lv_strParams_1_0,
						"org.xtext.example.avante.Prescription.StringParams");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleIntegerParams
entryRuleIntegerParams returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntegerParamsRule()); }
	iv_ruleIntegerParams=ruleIntegerParams
	{ $current=$iv_ruleIntegerParams.current; }
	EOF;

// Rule IntegerParams
ruleIntegerParams returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Integer'
		{
			newLeafNode(otherlv_0, grammarAccess.getIntegerParamsAccess().getIntegerKeyword_0());
		}
		otherlv_1=','
		{
			newLeafNode(otherlv_1, grammarAccess.getIntegerParamsAccess().getCommaKeyword_1());
		}
		(
			(
				lv_measureUnit_2_0=RULE_ID
				{
					newLeafNode(lv_measureUnit_2_0, grammarAccess.getIntegerParamsAccess().getMeasureUnitIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIntegerParamsRule());
					}
					setWithLastConsumed(
						$current,
						"measureUnit",
						lv_measureUnit_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getIntegerParamsAccess().getCommaKeyword_3());
		}
		otherlv_4='['
		{
			newLeafNode(otherlv_4, grammarAccess.getIntegerParamsAccess().getLeftSquareBracketKeyword_4());
		}
		(
			(
				lv_minValue_5_0=RULE_INT
				{
					newLeafNode(lv_minValue_5_0, grammarAccess.getIntegerParamsAccess().getMinValueINTTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIntegerParamsRule());
					}
					setWithLastConsumed(
						$current,
						"minValue",
						lv_minValue_5_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_6='-'
		{
			newLeafNode(otherlv_6, grammarAccess.getIntegerParamsAccess().getHyphenMinusKeyword_6());
		}
		(
			(
				lv_maxValue_7_0=RULE_INT
				{
					newLeafNode(lv_maxValue_7_0, grammarAccess.getIntegerParamsAccess().getMaxValueINTTerminalRuleCall_7_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIntegerParamsRule());
					}
					setWithLastConsumed(
						$current,
						"maxValue",
						lv_maxValue_7_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_8=']'
		{
			newLeafNode(otherlv_8, grammarAccess.getIntegerParamsAccess().getRightSquareBracketKeyword_8());
		}
	)
;

// Entry rule entryRuleStringParams
entryRuleStringParams returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringParamsRule()); }
	iv_ruleStringParams=ruleStringParams
	{ $current=$iv_ruleStringParams.current; }
	EOF;

// Rule StringParams
ruleStringParams returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='String'
		{
			newLeafNode(otherlv_0, grammarAccess.getStringParamsAccess().getStringKeyword_0());
		}
		otherlv_1=','
		{
			newLeafNode(otherlv_1, grammarAccess.getStringParamsAccess().getCommaKeyword_1());
		}
		otherlv_2='['
		{
			newLeafNode(otherlv_2, grammarAccess.getStringParamsAccess().getLeftSquareBracketKeyword_2());
		}
		(
			(
				lv_defValue_3_0=RULE_ID
				{
					newLeafNode(lv_defValue_3_0, grammarAccess.getStringParamsAccess().getDefValueIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStringParamsRule());
					}
					addWithLastConsumed(
						$current,
						"defValue",
						lv_defValue_3_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getStringParamsAccess().getCommaKeyword_4_0());
			}
			(
				(
					lv_defValue_5_0=RULE_ID
					{
						newLeafNode(lv_defValue_5_0, grammarAccess.getStringParamsAccess().getDefValueIDTerminalRuleCall_4_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getStringParamsRule());
						}
						addWithLastConsumed(
							$current,
							"defValue",
							lv_defValue_5_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)*
		otherlv_6=']'
		{
			newLeafNode(otherlv_6, grammarAccess.getStringParamsAccess().getRightSquareBracketKeyword_5());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
