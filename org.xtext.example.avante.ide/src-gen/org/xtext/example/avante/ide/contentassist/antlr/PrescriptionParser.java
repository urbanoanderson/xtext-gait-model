/*
 * generated by Xtext 2.16.0
 */
package org.xtext.example.avante.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.avante.ide.contentassist.antlr.internal.InternalPrescriptionParser;
import org.xtext.example.avante.services.PrescriptionGrammarAccess;

public class PrescriptionParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(PrescriptionGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, PrescriptionGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getAttributeParamsAccess().getAlternatives(), "rule__AttributeParams__Alternatives");
			builder.put(grammarAccess.getPrescriptionAccess().getGroup(), "rule__Prescription__Group__0");
			builder.put(grammarAccess.getAttributeAccess().getGroup(), "rule__Attribute__Group__0");
			builder.put(grammarAccess.getIntegerParamsAccess().getGroup(), "rule__IntegerParams__Group__0");
			builder.put(grammarAccess.getStringParamsAccess().getGroup(), "rule__StringParams__Group__0");
			builder.put(grammarAccess.getStringParamsAccess().getGroup_4(), "rule__StringParams__Group_4__0");
			builder.put(grammarAccess.getDomainModelAccess().getElementsAssignment(), "rule__DomainModel__ElementsAssignment");
			builder.put(grammarAccess.getPrescriptionAccess().getNameAssignment_1(), "rule__Prescription__NameAssignment_1");
			builder.put(grammarAccess.getPrescriptionAccess().getFeaturesAssignment_3(), "rule__Prescription__FeaturesAssignment_3");
			builder.put(grammarAccess.getAttributeAccess().getManyAssignment_0(), "rule__Attribute__ManyAssignment_0");
			builder.put(grammarAccess.getAttributeAccess().getNameAssignment_1(), "rule__Attribute__NameAssignment_1");
			builder.put(grammarAccess.getAttributeAccess().getAttrParamsAssignment_3(), "rule__Attribute__AttrParamsAssignment_3");
			builder.put(grammarAccess.getAttributeParamsAccess().getIntParamsAssignment_0(), "rule__AttributeParams__IntParamsAssignment_0");
			builder.put(grammarAccess.getAttributeParamsAccess().getStrParamsAssignment_1(), "rule__AttributeParams__StrParamsAssignment_1");
			builder.put(grammarAccess.getIntegerParamsAccess().getMeasureUnitAssignment_2(), "rule__IntegerParams__MeasureUnitAssignment_2");
			builder.put(grammarAccess.getIntegerParamsAccess().getMinValueAssignment_5(), "rule__IntegerParams__MinValueAssignment_5");
			builder.put(grammarAccess.getIntegerParamsAccess().getMaxValueAssignment_7(), "rule__IntegerParams__MaxValueAssignment_7");
			builder.put(grammarAccess.getStringParamsAccess().getDefValueAssignment_3(), "rule__StringParams__DefValueAssignment_3");
			builder.put(grammarAccess.getStringParamsAccess().getDefValueAssignment_4_1(), "rule__StringParams__DefValueAssignment_4_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private PrescriptionGrammarAccess grammarAccess;

	@Override
	protected InternalPrescriptionParser createParser() {
		InternalPrescriptionParser result = new InternalPrescriptionParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public PrescriptionGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(PrescriptionGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
